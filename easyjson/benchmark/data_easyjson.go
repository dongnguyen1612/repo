// +build  use_easyjson

// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package benchmark

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark(in *jlexer.Lexer, out *XLStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]LargeStruct, 0, 0)
					} else {
						out.Data = []LargeStruct{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 LargeStruct
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark(out *jwriter.Writer, in XLStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v XLStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v XLStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *XLStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *XLStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark1(in *jlexer.Lexer, out *LargeStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "search_metadata":
			easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark2(in, &out.SearchMetadata)
		case "statuses":
			if in.IsNull() {
				in.Skip()
				out.Statuses = nil
			} else {
				in.Delim('[')
				if out.Statuses == nil {
					if !in.IsDelim(']') {
						out.Statuses = make([]Status, 0, 0)
					} else {
						out.Statuses = []Status{}
					}
				} else {
					out.Statuses = (out.Statuses)[:0]
				}
				for !in.IsDelim(']') {
					var v4 Status
					easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark3(in, &v4)
					out.Statuses = append(out.Statuses, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark1(out *jwriter.Writer, in LargeStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"search_metadata\":"
		out.RawString(prefix[1:])
		easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark2(out, in.SearchMetadata)
	}
	{
		const prefix string = ",\"statuses\":"
		out.RawString(prefix)
		if in.Statuses == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Statuses {
				if v5 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark3(out, v6)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v LargeStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v LargeStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *LargeStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *LargeStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark1(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark3(in *jlexer.Lexer, out *Status) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contributors":
			if in.IsNull() {
				in.Skip()
				out.Contributors = nil
			} else {
				if out.Contributors == nil {
					out.Contributors = new(string)
				}
				*out.Contributors = string(in.String())
			}
		case "coordinates":
			if in.IsNull() {
				in.Skip()
				out.Coordinates = nil
			} else {
				if out.Coordinates == nil {
					out.Coordinates = new(string)
				}
				*out.Coordinates = string(in.String())
			}
		case "created_at":
			out.CreatedAt = string(in.String())
		case "entities":
			(out.Entities).UnmarshalEasyJSON(in)
		case "favorited":
			out.Favorited = bool(in.Bool())
		case "geo":
			if in.IsNull() {
				in.Skip()
				out.Geo = nil
			} else {
				if out.Geo == nil {
					out.Geo = new(string)
				}
				*out.Geo = string(in.String())
			}
		case "id":
			out.ID = int64(in.Int64())
		case "id_str":
			out.IDStr = string(in.String())
		case "in_reply_to_screen_name":
			if in.IsNull() {
				in.Skip()
				out.InReplyToScreenName = nil
			} else {
				if out.InReplyToScreenName == nil {
					out.InReplyToScreenName = new(string)
				}
				*out.InReplyToScreenName = string(in.String())
			}
		case "in_reply_to_status_id":
			if in.IsNull() {
				in.Skip()
				out.InReplyToStatusID = nil
			} else {
				if out.InReplyToStatusID == nil {
					out.InReplyToStatusID = new(string)
				}
				*out.InReplyToStatusID = string(in.String())
			}
		case "in_reply_to_status_id_str":
			if in.IsNull() {
				in.Skip()
				out.InReplyToStatusIDStr = nil
			} else {
				if out.InReplyToStatusIDStr == nil {
					out.InReplyToStatusIDStr = new(string)
				}
				*out.InReplyToStatusIDStr = string(in.String())
			}
		case "in_reply_to_user_id":
			if in.IsNull() {
				in.Skip()
				out.InReplyToUserID = nil
			} else {
				if out.InReplyToUserID == nil {
					out.InReplyToUserID = new(string)
				}
				*out.InReplyToUserID = string(in.String())
			}
		case "in_reply_to_user_id_str":
			if in.IsNull() {
				in.Skip()
				out.InReplyToUserIDStr = nil
			} else {
				if out.InReplyToUserIDStr == nil {
					out.InReplyToUserIDStr = new(string)
				}
				*out.InReplyToUserIDStr = string(in.String())
			}
		case "metadata":
			easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark4(in, &out.Metadata)
		case "place":
			if in.IsNull() {
				in.Skip()
				out.Place = nil
			} else {
				if out.Place == nil {
					out.Place = new(string)
				}
				*out.Place = string(in.String())
			}
		case "retweet_count":
			out.RetweetCount = int(in.Int())
		case "retweeted":
			out.Retweeted = bool(in.Bool())
		case "source":
			out.Source = string(in.String())
		case "text":
			out.Text = string(in.String())
		case "truncated":
			out.Truncated = bool(in.Bool())
		case "user":
			easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark5(in, &out.User)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark3(out *jwriter.Writer, in Status) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contributors\":"
		out.RawString(prefix[1:])
		if in.Contributors == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Contributors))
		}
	}
	{
		const prefix string = ",\"coordinates\":"
		out.RawString(prefix)
		if in.Coordinates == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Coordinates))
		}
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		(in.Entities).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"favorited\":"
		out.RawString(prefix)
		out.Bool(bool(in.Favorited))
	}
	{
		const prefix string = ",\"geo\":"
		out.RawString(prefix)
		if in.Geo == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Geo))
		}
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int64(int64(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"in_reply_to_screen_name\":"
		out.RawString(prefix)
		if in.InReplyToScreenName == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InReplyToScreenName))
		}
	}
	{
		const prefix string = ",\"in_reply_to_status_id\":"
		out.RawString(prefix)
		if in.InReplyToStatusID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InReplyToStatusID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_status_id_str\":"
		out.RawString(prefix)
		if in.InReplyToStatusIDStr == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InReplyToStatusIDStr))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id\":"
		out.RawString(prefix)
		if in.InReplyToUserID == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InReplyToUserID))
		}
	}
	{
		const prefix string = ",\"in_reply_to_user_id_str\":"
		out.RawString(prefix)
		if in.InReplyToUserIDStr == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.InReplyToUserIDStr))
		}
	}
	{
		const prefix string = ",\"metadata\":"
		out.RawString(prefix)
		easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark4(out, in.Metadata)
	}
	{
		const prefix string = ",\"place\":"
		out.RawString(prefix)
		if in.Place == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Place))
		}
	}
	{
		const prefix string = ",\"retweet_count\":"
		out.RawString(prefix)
		out.Int(int(in.RetweetCount))
	}
	{
		const prefix string = ",\"retweeted\":"
		out.RawString(prefix)
		out.Bool(bool(in.Retweeted))
	}
	{
		const prefix string = ",\"source\":"
		out.RawString(prefix)
		out.String(string(in.Source))
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	{
		const prefix string = ",\"truncated\":"
		out.RawString(prefix)
		out.Bool(bool(in.Truncated))
	}
	{
		const prefix string = ",\"user\":"
		out.RawString(prefix)
		easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark5(out, in.User)
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark5(in *jlexer.Lexer, out *User) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "contributors_enabled":
			out.ContributorsEnabled = bool(in.Bool())
		case "created_at":
			out.CreatedAt = string(in.String())
		case "default_profile":
			out.DefaultProfile = bool(in.Bool())
		case "default_profile_image":
			out.DefaultProfileImage = bool(in.Bool())
		case "description":
			out.Description = string(in.String())
		case "entities":
			easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark6(in, &out.Entities)
		case "favourites_count":
			out.FavouritesCount = int(in.Int())
		case "follow_request_sent":
			if in.IsNull() {
				in.Skip()
				out.FollowRequestSent = nil
			} else {
				if out.FollowRequestSent == nil {
					out.FollowRequestSent = new(string)
				}
				*out.FollowRequestSent = string(in.String())
			}
		case "followers_count":
			out.FollowersCount = int(in.Int())
		case "following":
			if in.IsNull() {
				in.Skip()
				out.Following = nil
			} else {
				if out.Following == nil {
					out.Following = new(string)
				}
				*out.Following = string(in.String())
			}
		case "friends_count":
			out.FriendsCount = int(in.Int())
		case "geo_enabled":
			out.GeoEnabled = bool(in.Bool())
		case "id":
			out.ID = int(in.Int())
		case "id_str":
			out.IDStr = string(in.String())
		case "is_translator":
			out.IsTranslator = bool(in.Bool())
		case "lang":
			out.Lang = string(in.String())
		case "listed_count":
			out.ListedCount = int(in.Int())
		case "location":
			out.Location = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "notifications":
			if in.IsNull() {
				in.Skip()
				out.Notifications = nil
			} else {
				if out.Notifications == nil {
					out.Notifications = new(string)
				}
				*out.Notifications = string(in.String())
			}
		case "profile_background_color":
			out.ProfileBackgroundColor = string(in.String())
		case "profile_background_image_url":
			out.ProfileBackgroundImageURL = string(in.String())
		case "profile_background_image_url_https":
			out.ProfileBackgroundImageURLHTTPS = string(in.String())
		case "profile_background_tile":
			out.ProfileBackgroundTile = bool(in.Bool())
		case "profile_image_url":
			out.ProfileImageURL = string(in.String())
		case "profile_image_url_https":
			out.ProfileImageURLHTTPS = string(in.String())
		case "profile_link_color":
			out.ProfileLinkColor = string(in.String())
		case "profile_sidebar_border_color":
			out.ProfileSidebarBorderColor = string(in.String())
		case "profile_sidebar_fill_color":
			out.ProfileSidebarFillColor = string(in.String())
		case "profile_text_color":
			out.ProfileTextColor = string(in.String())
		case "profile_use_background_image":
			out.ProfileUseBackgroundImage = bool(in.Bool())
		case "protected":
			out.Protected = bool(in.Bool())
		case "screen_name":
			out.ScreenName = string(in.String())
		case "show_all_inline_media":
			out.ShowAllInlineMedia = bool(in.Bool())
		case "statuses_count":
			out.StatusesCount = int(in.Int())
		case "time_zone":
			out.TimeZone = string(in.String())
		case "url":
			if in.IsNull() {
				in.Skip()
				out.URL = nil
			} else {
				if out.URL == nil {
					out.URL = new(string)
				}
				*out.URL = string(in.String())
			}
		case "utc_offset":
			out.UtcOffset = int(in.Int())
		case "verified":
			out.Verified = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark5(out *jwriter.Writer, in User) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"contributors_enabled\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.ContributorsEnabled))
	}
	{
		const prefix string = ",\"created_at\":"
		out.RawString(prefix)
		out.String(string(in.CreatedAt))
	}
	{
		const prefix string = ",\"default_profile\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfile))
	}
	{
		const prefix string = ",\"default_profile_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.DefaultProfileImage))
	}
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix)
		out.String(string(in.Description))
	}
	{
		const prefix string = ",\"entities\":"
		out.RawString(prefix)
		easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark6(out, in.Entities)
	}
	{
		const prefix string = ",\"favourites_count\":"
		out.RawString(prefix)
		out.Int(int(in.FavouritesCount))
	}
	{
		const prefix string = ",\"follow_request_sent\":"
		out.RawString(prefix)
		if in.FollowRequestSent == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.FollowRequestSent))
		}
	}
	{
		const prefix string = ",\"followers_count\":"
		out.RawString(prefix)
		out.Int(int(in.FollowersCount))
	}
	{
		const prefix string = ",\"following\":"
		out.RawString(prefix)
		if in.Following == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Following))
		}
	}
	{
		const prefix string = ",\"friends_count\":"
		out.RawString(prefix)
		out.Int(int(in.FriendsCount))
	}
	{
		const prefix string = ",\"geo_enabled\":"
		out.RawString(prefix)
		out.Bool(bool(in.GeoEnabled))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"id_str\":"
		out.RawString(prefix)
		out.String(string(in.IDStr))
	}
	{
		const prefix string = ",\"is_translator\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsTranslator))
	}
	{
		const prefix string = ",\"lang\":"
		out.RawString(prefix)
		out.String(string(in.Lang))
	}
	{
		const prefix string = ",\"listed_count\":"
		out.RawString(prefix)
		out.Int(int(in.ListedCount))
	}
	{
		const prefix string = ",\"location\":"
		out.RawString(prefix)
		out.String(string(in.Location))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"notifications\":"
		out.RawString(prefix)
		if in.Notifications == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Notifications))
		}
	}
	{
		const prefix string = ",\"profile_background_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundColor))
	}
	{
		const prefix string = ",\"profile_background_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURL))
	}
	{
		const prefix string = ",\"profile_background_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileBackgroundImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_background_tile\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileBackgroundTile))
	}
	{
		const prefix string = ",\"profile_image_url\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURL))
	}
	{
		const prefix string = ",\"profile_image_url_https\":"
		out.RawString(prefix)
		out.String(string(in.ProfileImageURLHTTPS))
	}
	{
		const prefix string = ",\"profile_link_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileLinkColor))
	}
	{
		const prefix string = ",\"profile_sidebar_border_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarBorderColor))
	}
	{
		const prefix string = ",\"profile_sidebar_fill_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileSidebarFillColor))
	}
	{
		const prefix string = ",\"profile_text_color\":"
		out.RawString(prefix)
		out.String(string(in.ProfileTextColor))
	}
	{
		const prefix string = ",\"profile_use_background_image\":"
		out.RawString(prefix)
		out.Bool(bool(in.ProfileUseBackgroundImage))
	}
	{
		const prefix string = ",\"protected\":"
		out.RawString(prefix)
		out.Bool(bool(in.Protected))
	}
	{
		const prefix string = ",\"screen_name\":"
		out.RawString(prefix)
		out.String(string(in.ScreenName))
	}
	{
		const prefix string = ",\"show_all_inline_media\":"
		out.RawString(prefix)
		out.Bool(bool(in.ShowAllInlineMedia))
	}
	{
		const prefix string = ",\"statuses_count\":"
		out.RawString(prefix)
		out.Int(int(in.StatusesCount))
	}
	{
		const prefix string = ",\"time_zone\":"
		out.RawString(prefix)
		out.String(string(in.TimeZone))
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		if in.URL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.URL))
		}
	}
	{
		const prefix string = ",\"utc_offset\":"
		out.RawString(prefix)
		out.Int(int(in.UtcOffset))
	}
	{
		const prefix string = ",\"verified\":"
		out.RawString(prefix)
		out.Bool(bool(in.Verified))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark6(in *jlexer.Lexer, out *UserEntities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "description":
			easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark7(in, &out.Description)
		case "url":
			easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark8(in, &out.URL)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark6(out *jwriter.Writer, in UserEntities) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"description\":"
		out.RawString(prefix[1:])
		easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark7(out, in.Description)
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark8(out, in.URL)
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark8(in *jlexer.Lexer, out *UserEntityURL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]URL, 0, 1)
					} else {
						out.Urls = []URL{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v7 URL
					easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark9(in, &v7)
					out.Urls = append(out.Urls, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark8(out *jwriter.Writer, in UserEntityURL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.Urls {
				if v8 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark9(out, v9)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark9(in *jlexer.Lexer, out *URL) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "expanded_url":
			if in.IsNull() {
				in.Skip()
				out.ExpandedURL = nil
			} else {
				if out.ExpandedURL == nil {
					out.ExpandedURL = new(string)
				}
				*out.ExpandedURL = string(in.String())
			}
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v10 int
					v10 = int(in.Int())
					out.Indices = append(out.Indices, v10)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "url":
			out.URL = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark9(out *jwriter.Writer, in URL) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"expanded_url\":"
		out.RawString(prefix[1:])
		if in.ExpandedURL == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.ExpandedURL))
		}
	}
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix)
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Indices {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"url\":"
		out.RawString(prefix)
		out.String(string(in.URL))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark7(in *jlexer.Lexer, out *UserEntityDescription) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]*string, 0, 8)
					} else {
						out.Urls = []*string{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v13 *string
					if in.IsNull() {
						in.Skip()
						v13 = nil
					} else {
						if v13 == nil {
							v13 = new(string)
						}
						*v13 = string(in.String())
					}
					out.Urls = append(out.Urls, v13)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark7(out *jwriter.Writer, in UserEntityDescription) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix[1:])
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.Urls {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					out.String(string(*v15))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark4(in *jlexer.Lexer, out *StatusMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "iso_language_code":
			out.IsoLanguageCode = string(in.String())
		case "result_type":
			out.ResultType = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark4(out *jwriter.Writer, in StatusMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"iso_language_code\":"
		out.RawString(prefix[1:])
		out.String(string(in.IsoLanguageCode))
	}
	{
		const prefix string = ",\"result_type\":"
		out.RawString(prefix)
		out.String(string(in.ResultType))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark2(in *jlexer.Lexer, out *SearchMetadata) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "completed_in":
			out.CompletedIn = float64(in.Float64())
		case "count":
			out.Count = int(in.Int())
		case "max_id":
			out.MaxID = int64(in.Int64())
		case "max_id_str":
			out.MaxIDStr = string(in.String())
		case "next_results":
			out.NextResults = string(in.String())
		case "query":
			out.Query = string(in.String())
		case "refresh_url":
			out.RefreshURL = string(in.String())
		case "since_id":
			out.SinceID = int64(in.Int64())
		case "since_id_str":
			out.SinceIDStr = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark2(out *jwriter.Writer, in SearchMetadata) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"completed_in\":"
		out.RawString(prefix[1:])
		out.Float64(float64(in.CompletedIn))
	}
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix)
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"max_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.MaxID))
	}
	{
		const prefix string = ",\"max_id_str\":"
		out.RawString(prefix)
		out.String(string(in.MaxIDStr))
	}
	{
		const prefix string = ",\"next_results\":"
		out.RawString(prefix)
		out.String(string(in.NextResults))
	}
	{
		const prefix string = ",\"query\":"
		out.RawString(prefix)
		out.String(string(in.Query))
	}
	{
		const prefix string = ",\"refresh_url\":"
		out.RawString(prefix)
		out.String(string(in.RefreshURL))
	}
	{
		const prefix string = ",\"since_id\":"
		out.RawString(prefix)
		out.Int64(int64(in.SinceID))
	}
	{
		const prefix string = ",\"since_id_str\":"
		out.RawString(prefix)
		out.String(string(in.SinceIDStr))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark10(in *jlexer.Lexer, out *Entities) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "hashtags":
			if in.IsNull() {
				in.Skip()
				out.Hashtags = nil
			} else {
				in.Delim('[')
				if out.Hashtags == nil {
					if !in.IsDelim(']') {
						out.Hashtags = make([]Hashtag, 0, 1)
					} else {
						out.Hashtags = []Hashtag{}
					}
				} else {
					out.Hashtags = (out.Hashtags)[:0]
				}
				for !in.IsDelim(']') {
					var v16 Hashtag
					easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark11(in, &v16)
					out.Hashtags = append(out.Hashtags, v16)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "urls":
			if in.IsNull() {
				in.Skip()
				out.Urls = nil
			} else {
				in.Delim('[')
				if out.Urls == nil {
					if !in.IsDelim(']') {
						out.Urls = make([]*string, 0, 8)
					} else {
						out.Urls = []*string{}
					}
				} else {
					out.Urls = (out.Urls)[:0]
				}
				for !in.IsDelim(']') {
					var v17 *string
					if in.IsNull() {
						in.Skip()
						v17 = nil
					} else {
						if v17 == nil {
							v17 = new(string)
						}
						*v17 = string(in.String())
					}
					out.Urls = append(out.Urls, v17)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "user_mentions":
			if in.IsNull() {
				in.Skip()
				out.UserMentions = nil
			} else {
				in.Delim('[')
				if out.UserMentions == nil {
					if !in.IsDelim(']') {
						out.UserMentions = make([]*string, 0, 8)
					} else {
						out.UserMentions = []*string{}
					}
				} else {
					out.UserMentions = (out.UserMentions)[:0]
				}
				for !in.IsDelim(']') {
					var v18 *string
					if in.IsNull() {
						in.Skip()
						v18 = nil
					} else {
						if v18 == nil {
							v18 = new(string)
						}
						*v18 = string(in.String())
					}
					out.UserMentions = append(out.UserMentions, v18)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark10(out *jwriter.Writer, in Entities) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"hashtags\":"
		out.RawString(prefix[1:])
		if in.Hashtags == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v19, v20 := range in.Hashtags {
				if v19 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark11(out, v20)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"urls\":"
		out.RawString(prefix)
		if in.Urls == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v21, v22 := range in.Urls {
				if v21 > 0 {
					out.RawByte(',')
				}
				if v22 == nil {
					out.RawString("null")
				} else {
					out.String(string(*v22))
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"user_mentions\":"
		out.RawString(prefix)
		if in.UserMentions == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v23, v24 := range in.UserMentions {
				if v23 > 0 {
					out.RawByte(',')
				}
				if v24 == nil {
					out.RawString("null")
				} else {
					out.String(string(*v24))
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Entities) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Entities) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Entities) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Entities) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark10(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonBenchmark11(in *jlexer.Lexer, out *Hashtag) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(true)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "indices":
			if in.IsNull() {
				in.Skip()
				out.Indices = nil
			} else {
				in.Delim('[')
				if out.Indices == nil {
					if !in.IsDelim(']') {
						out.Indices = make([]int, 0, 8)
					} else {
						out.Indices = []int{}
					}
				} else {
					out.Indices = (out.Indices)[:0]
				}
				for !in.IsDelim(']') {
					var v25 int
					v25 = int(in.Int())
					out.Indices = append(out.Indices, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "text":
			out.Text = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonBenchmark11(out *jwriter.Writer, in Hashtag) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"indices\":"
		out.RawString(prefix[1:])
		if in.Indices == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v26, v27 := range in.Indices {
				if v26 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v27))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"text\":"
		out.RawString(prefix)
		out.String(string(in.Text))
	}
	out.RawByte('}')
}
