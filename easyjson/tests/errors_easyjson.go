// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tests

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests(in *jlexer.Lexer, out *ErrorUintSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ErrorUintSlice, 0, 8)
			} else {
				*out = ErrorUintSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v1 uint
			v1 = uint(in.Uint())
			*out = append(*out, v1)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests(out *jwriter.Writer, in ErrorUintSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v2, v3 := range in {
			if v2 > 0 {
				out.RawByte(',')
			}
			out.Uint(uint(v3))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorUintSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorUintSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorUintSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorUintSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests(l, v)
}
func easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests1(in *jlexer.Lexer, out *ErrorStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "int":
			out.Int = int(in.Int())
		case "string":
			out.String = string(in.String())
		case "slice":
			if in.IsNull() {
				in.Skip()
				out.Slice = nil
			} else {
				in.Delim('[')
				if out.Slice == nil {
					if !in.IsDelim(']') {
						out.Slice = make([]int, 0, 8)
					} else {
						out.Slice = []int{}
					}
				} else {
					out.Slice = (out.Slice)[:0]
				}
				for !in.IsDelim(']') {
					var v4 int
					v4 = int(in.Int())
					out.Slice = append(out.Slice, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "int_slice":
			if in.IsNull() {
				in.Skip()
				out.IntSlice = nil
			} else {
				in.Delim('[')
				if out.IntSlice == nil {
					if !in.IsDelim(']') {
						out.IntSlice = make([]int, 0, 8)
					} else {
						out.IntSlice = []int{}
					}
				} else {
					out.IntSlice = (out.IntSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v5 int
					v5 = int(in.Int())
					out.IntSlice = append(out.IntSlice, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests1(out *jwriter.Writer, in ErrorStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"int\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"string\":"
		out.RawString(prefix)
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"slice\":"
		out.RawString(prefix)
		if in.Slice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v6, v7 := range in.Slice {
				if v6 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v7))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"int_slice\":"
		out.RawString(prefix)
		if in.IntSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.IntSlice {
				if v8 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v9))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests1(l, v)
}
func easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests2(in *jlexer.Lexer, out *ErrorNestedStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "error_struct":
			(out.ErrorStruct).UnmarshalEasyJSON(in)
		case "int":
			out.Int = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests2(out *jwriter.Writer, in ErrorNestedStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"error_struct\":"
		out.RawString(prefix[1:])
		(in.ErrorStruct).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"int\":"
		out.RawString(prefix)
		out.Int(int(in.Int))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorNestedStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorNestedStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorNestedStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorNestedStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests2(l, v)
}
func easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests3(in *jlexer.Lexer, out *ErrorIntSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ErrorIntSlice, 0, 8)
			} else {
				*out = ErrorIntSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v10 int
			v10 = int(in.Int())
			*out = append(*out, v10)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests3(out *jwriter.Writer, in ErrorIntSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v11, v12 := range in {
			if v11 > 0 {
				out.RawByte(',')
			}
			out.Int(int(v12))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorIntSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorIntSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorIntSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorIntSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests3(l, v)
}
func easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests4(in *jlexer.Lexer, out *ErrorIntMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(ErrorIntMap)
		for !in.IsDelim('}') {
			key := uint32(in.Uint32Str())
			in.WantColon()
			var v13 string
			v13 = string(in.String())
			(*out)[key] = v13
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests4(out *jwriter.Writer, in ErrorIntMap) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v14First := true
		for v14Name, v14Value := range in {
			if v14First {
				v14First = false
			} else {
				out.RawByte(',')
			}
			out.Uint32Str(uint32(v14Name))
			out.RawByte(':')
			out.String(string(v14Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorIntMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorIntMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorIntMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorIntMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests4(l, v)
}
func easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests5(in *jlexer.Lexer, out *ErrorBoolSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(ErrorBoolSlice, 0, 64)
			} else {
				*out = ErrorBoolSlice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v15 bool
			v15 = bool(in.Bool())
			*out = append(*out, v15)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests5(out *jwriter.Writer, in ErrorBoolSlice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v16, v17 := range in {
			if v16 > 0 {
				out.RawByte(',')
			}
			out.Bool(bool(v17))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v ErrorBoolSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ErrorBoolSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonD31a5a85EncodeGithubComMailruEasyjsonTests5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ErrorBoolSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ErrorBoolSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonD31a5a85DecodeGithubComMailruEasyjsonTests5(l, v)
}
