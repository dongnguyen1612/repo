// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tests

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson20386856DecodeGithubComMailruEasyjsonTests(in *jlexer.Lexer, out *KeyWithEncodingMarshalers) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(KeyWithEncodingMarshalers)
		for !in.IsDelim('}') {
			var key KeyWithEncodingMarshaler
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError(key.UnmarshalText(data))
			}
			in.WantColon()
			var v1 string
			v1 = string(in.String())
			(*out)[key] = v1
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson20386856EncodeGithubComMailruEasyjsonTests(out *jwriter.Writer, in KeyWithEncodingMarshalers) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v2First := true
		for v2Name, v2Value := range in {
			if v2First {
				v2First = false
			} else {
				out.RawByte(',')
			}
			out.RawText((v2Name).MarshalText())
			out.RawByte(':')
			out.String(string(v2Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v KeyWithEncodingMarshalers) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson20386856EncodeGithubComMailruEasyjsonTests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v KeyWithEncodingMarshalers) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson20386856EncodeGithubComMailruEasyjsonTests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *KeyWithEncodingMarshalers) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson20386856DecodeGithubComMailruEasyjsonTests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *KeyWithEncodingMarshalers) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson20386856DecodeGithubComMailruEasyjsonTests(l, v)
}
