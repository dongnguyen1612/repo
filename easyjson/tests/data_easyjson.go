// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tests

import (
	json "encoding/json"
	fmt "fmt"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson794297d0DecodeGithubComMailruEasyjsonTests(in *jlexer.Lexer, out *unexportedStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests(out *jwriter.Writer, in unexportedStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v unexportedStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v unexportedStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *unexportedStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *unexportedStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests1(in *jlexer.Lexer, out *UserMarshaler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "V":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.V).UnmarshalJSON(data))
			}
		case "T":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.T).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests1(out *jwriter.Writer, in UserMarshaler) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix[1:])
		out.Raw((in.V).MarshalJSON())
	}
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix)
		out.RawText((in.T).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UserMarshaler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UserMarshaler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UserMarshaler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UserMarshaler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests1(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests2(in *jlexer.Lexer, out *SubStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = string(in.String())
		case "Value2":
			out.Value2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests2(out *jwriter.Writer, in SubStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Value2\":"
		out.RawString(prefix)
		out.String(string(in.Value2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests2(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests3(in *jlexer.Lexer, out *SubP) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "V":
			out.V = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests3(out *jwriter.Writer, in SubP) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix[1:])
		out.String(string(in.V))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SubP) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SubP) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SubP) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SubP) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests3(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests4(in *jlexer.Lexer, out *Structs) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	out.SubP = new(SubP)
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value2":
			out.Value2 = int(in.Int())
		case "substruct":
			(out.Sub1).UnmarshalEasyJSON(in)
		case "Sub2":
			if in.IsNull() {
				in.Skip()
				out.Sub2 = nil
			} else {
				if out.Sub2 == nil {
					out.Sub2 = new(SubStruct)
				}
				(*out.Sub2).UnmarshalEasyJSON(in)
			}
		case "SubNil":
			if in.IsNull() {
				in.Skip()
				out.SubNil = nil
			} else {
				if out.SubNil == nil {
					out.SubNil = new(SubStruct)
				}
				(*out.SubNil).UnmarshalEasyJSON(in)
			}
		case "SubSlice":
			if in.IsNull() {
				in.Skip()
				out.SubSlice = nil
			} else {
				in.Delim('[')
				if out.SubSlice == nil {
					if !in.IsDelim(']') {
						out.SubSlice = make([]SubStruct, 0, 1)
					} else {
						out.SubSlice = []SubStruct{}
					}
				} else {
					out.SubSlice = (out.SubSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v1 SubStruct
					(v1).UnmarshalEasyJSON(in)
					out.SubSlice = append(out.SubSlice, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SubSliceNil":
			if in.IsNull() {
				in.Skip()
				out.SubSliceNil = nil
			} else {
				in.Delim('[')
				if out.SubSliceNil == nil {
					if !in.IsDelim(']') {
						out.SubSliceNil = make([]SubStruct, 0, 1)
					} else {
						out.SubSliceNil = []SubStruct{}
					}
				} else {
					out.SubSliceNil = (out.SubSliceNil)[:0]
				}
				for !in.IsDelim(']') {
					var v2 SubStruct
					(v2).UnmarshalEasyJSON(in)
					out.SubSliceNil = append(out.SubSliceNil, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SubPtrSlice":
			if in.IsNull() {
				in.Skip()
				out.SubPtrSlice = nil
			} else {
				in.Delim('[')
				if out.SubPtrSlice == nil {
					if !in.IsDelim(']') {
						out.SubPtrSlice = make([]*SubStruct, 0, 8)
					} else {
						out.SubPtrSlice = []*SubStruct{}
					}
				} else {
					out.SubPtrSlice = (out.SubPtrSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v3 *SubStruct
					if in.IsNull() {
						in.Skip()
						v3 = nil
					} else {
						if v3 == nil {
							v3 = new(SubStruct)
						}
						(*v3).UnmarshalEasyJSON(in)
					}
					out.SubPtrSlice = append(out.SubPtrSlice, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SubPtrSliceNil":
			if in.IsNull() {
				in.Skip()
				out.SubPtrSliceNil = nil
			} else {
				in.Delim('[')
				if out.SubPtrSliceNil == nil {
					if !in.IsDelim(']') {
						out.SubPtrSliceNil = make([]*SubStruct, 0, 8)
					} else {
						out.SubPtrSliceNil = []*SubStruct{}
					}
				} else {
					out.SubPtrSliceNil = (out.SubPtrSliceNil)[:0]
				}
				for !in.IsDelim(']') {
					var v4 *SubStruct
					if in.IsNull() {
						in.Skip()
						v4 = nil
					} else {
						if v4 == nil {
							v4 = new(SubStruct)
						}
						(*v4).UnmarshalEasyJSON(in)
					}
					out.SubPtrSliceNil = append(out.SubPtrSliceNil, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "SubA1":
			easyjson794297d0DecodeGithubComMailruEasyjsonTests5(in, &out.SubA1)
		case "SubA2":
			if in.IsNull() {
				in.Skip()
				out.SubA2 = nil
			} else {
				if out.SubA2 == nil {
					out.SubA2 = new(SubStructAlias)
				}
				easyjson794297d0DecodeGithubComMailruEasyjsonTests5(in, out.SubA2)
			}
		case "Anonymous":
			easyjson794297d0Decode(in, &out.Anonymous)
		case "Anonymous1":
			if in.IsNull() {
				in.Skip()
				out.Anonymous1 = nil
			} else {
				if out.Anonymous1 == nil {
					out.Anonymous1 = new(struct{ V string })
				}
				easyjson794297d0Decode1(in, out.Anonymous1)
			}
		case "AnonymousSlice":
			if in.IsNull() {
				in.Skip()
				out.AnonymousSlice = nil
			} else {
				in.Delim('[')
				if out.AnonymousSlice == nil {
					if !in.IsDelim(']') {
						out.AnonymousSlice = make([]struct{ V int }, 0, 8)
					} else {
						out.AnonymousSlice = []struct{ V int }{}
					}
				} else {
					out.AnonymousSlice = (out.AnonymousSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v5 struct{ V int }
					easyjson794297d0Decode2(in, &v5)
					out.AnonymousSlice = append(out.AnonymousSlice, v5)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "AnonymousPtrSlice":
			if in.IsNull() {
				in.Skip()
				out.AnonymousPtrSlice = nil
			} else {
				in.Delim('[')
				if out.AnonymousPtrSlice == nil {
					if !in.IsDelim(']') {
						out.AnonymousPtrSlice = make([]*struct{ V int }, 0, 8)
					} else {
						out.AnonymousPtrSlice = []*struct{ V int }{}
					}
				} else {
					out.AnonymousPtrSlice = (out.AnonymousPtrSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v6 *struct{ V int }
					if in.IsNull() {
						in.Skip()
						v6 = nil
					} else {
						if v6 == nil {
							v6 = new(struct{ V int })
						}
						easyjson794297d0Decode2(in, v6)
					}
					out.AnonymousPtrSlice = append(out.AnonymousPtrSlice, v6)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "Slice":
			if in.IsNull() {
				in.Skip()
				out.Slice = nil
			} else {
				in.Delim('[')
				if out.Slice == nil {
					if !in.IsDelim(']') {
						out.Slice = make([]string, 0, 4)
					} else {
						out.Slice = []string{}
					}
				} else {
					out.Slice = (out.Slice)[:0]
				}
				for !in.IsDelim(']') {
					var v7 string
					v7 = string(in.String())
					out.Slice = append(out.Slice, v7)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "V":
			out.V = string(in.String())
		case "Value":
			out.Value = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests4(out *jwriter.Writer, in Structs) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value2\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Value2))
	}
	{
		const prefix string = ",\"substruct\":"
		out.RawString(prefix)
		(in.Sub1).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Sub2\":"
		out.RawString(prefix)
		if in.Sub2 == nil {
			out.RawString("null")
		} else {
			(*in.Sub2).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"SubNil\":"
		out.RawString(prefix)
		if in.SubNil == nil {
			out.RawString("null")
		} else {
			(*in.SubNil).MarshalEasyJSON(out)
		}
	}
	{
		const prefix string = ",\"SubSlice\":"
		out.RawString(prefix)
		if in.SubSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v8, v9 := range in.SubSlice {
				if v8 > 0 {
					out.RawByte(',')
				}
				(v9).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SubSliceNil\":"
		out.RawString(prefix)
		if in.SubSliceNil == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v10, v11 := range in.SubSliceNil {
				if v10 > 0 {
					out.RawByte(',')
				}
				(v11).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SubPtrSlice\":"
		out.RawString(prefix)
		if in.SubPtrSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v12, v13 := range in.SubPtrSlice {
				if v12 > 0 {
					out.RawByte(',')
				}
				if v13 == nil {
					out.RawString("null")
				} else {
					(*v13).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SubPtrSliceNil\":"
		out.RawString(prefix)
		if in.SubPtrSliceNil == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v14, v15 := range in.SubPtrSliceNil {
				if v14 > 0 {
					out.RawByte(',')
				}
				if v15 == nil {
					out.RawString("null")
				} else {
					(*v15).MarshalEasyJSON(out)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"SubA1\":"
		out.RawString(prefix)
		easyjson794297d0EncodeGithubComMailruEasyjsonTests5(out, in.SubA1)
	}
	{
		const prefix string = ",\"SubA2\":"
		out.RawString(prefix)
		if in.SubA2 == nil {
			out.RawString("null")
		} else {
			easyjson794297d0EncodeGithubComMailruEasyjsonTests5(out, *in.SubA2)
		}
	}
	{
		const prefix string = ",\"Anonymous\":"
		out.RawString(prefix)
		easyjson794297d0Encode(out, in.Anonymous)
	}
	{
		const prefix string = ",\"Anonymous1\":"
		out.RawString(prefix)
		if in.Anonymous1 == nil {
			out.RawString("null")
		} else {
			easyjson794297d0Encode1(out, *in.Anonymous1)
		}
	}
	{
		const prefix string = ",\"AnonymousSlice\":"
		out.RawString(prefix)
		if in.AnonymousSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v16, v17 := range in.AnonymousSlice {
				if v16 > 0 {
					out.RawByte(',')
				}
				easyjson794297d0Encode2(out, v17)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"AnonymousPtrSlice\":"
		out.RawString(prefix)
		if in.AnonymousPtrSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v18, v19 := range in.AnonymousPtrSlice {
				if v18 > 0 {
					out.RawByte(',')
				}
				if v19 == nil {
					out.RawString("null")
				} else {
					easyjson794297d0Encode2(out, *v19)
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"Slice\":"
		out.RawString(prefix)
		if in.Slice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v20, v21 := range in.Slice {
				if v20 > 0 {
					out.RawByte(',')
				}
				out.String(string(v21))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix)
		out.String(string(in.V))
	}
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix)
		out.String(string(in.Value))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Structs) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Structs) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Structs) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Structs) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests4(l, v)
}
func easyjson794297d0Decode2(in *jlexer.Lexer, out *struct{ V int }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "V":
			out.V = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode2(out *jwriter.Writer, in struct{ V int }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix[1:])
		out.Int(int(in.V))
	}
	out.RawByte('}')
}
func easyjson794297d0Decode1(in *jlexer.Lexer, out *struct{ V string }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "V":
			out.V = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode1(out *jwriter.Writer, in struct{ V string }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix[1:])
		out.String(string(in.V))
	}
	out.RawByte('}')
}
func easyjson794297d0Decode(in *jlexer.Lexer, out *struct {
	V string
	I int
}) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "V":
			out.V = string(in.String())
		case "I":
			out.I = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0Encode(out *jwriter.Writer, in struct {
	V string
	I int
}) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"V\":"
		out.RawString(prefix[1:])
		out.String(string(in.V))
	}
	{
		const prefix string = ",\"I\":"
		out.RawString(prefix)
		out.Int(int(in.I))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests5(in *jlexer.Lexer, out *SubStructAlias) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Value":
			out.Value = string(in.String())
		case "Value2":
			out.Value2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests5(out *jwriter.Writer, in SubStructAlias) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Value\":"
		out.RawString(prefix[1:])
		out.String(string(in.Value))
	}
	{
		const prefix string = ",\"Value2\":"
		out.RawString(prefix)
		out.String(string(in.Value2))
	}
	out.RawByte('}')
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests6(in *jlexer.Lexer, out *StructWithInterface) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "f1":
			out.Field1 = int(in.Int())
		case "f2":
			if m, ok := out.Field2.(easyjson.Unmarshaler); ok {
				m.UnmarshalEasyJSON(in)
			} else if m, ok := out.Field2.(json.Unmarshaler); ok {
				_ = m.UnmarshalJSON(in.Raw())
			} else {
				out.Field2 = in.Interface()
			}
		case "f3":
			out.Field3 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests6(out *jwriter.Writer, in StructWithInterface) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"f1\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Field1))
	}
	{
		const prefix string = ",\"f2\":"
		out.RawString(prefix)
		if m, ok := in.Field2.(easyjson.Marshaler); ok {
			m.MarshalEasyJSON(out)
		} else if m, ok := in.Field2.(json.Marshaler); ok {
			out.Raw(m.MarshalJSON())
		} else {
			out.Raw(json.Marshal(in.Field2))
		}
	}
	{
		const prefix string = ",\"f3\":"
		out.RawString(prefix)
		out.String(string(in.Field3))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StructWithInterface) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StructWithInterface) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StructWithInterface) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StructWithInterface) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests6(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests7(in *jlexer.Lexer, out *StdMarshaler) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "T":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.T).UnmarshalJSON(data))
			}
		case "IP":
			if data := in.UnsafeBytes(); in.Ok() {
				in.AddError((out.IP).UnmarshalText(data))
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests7(out *jwriter.Writer, in StdMarshaler) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"T\":"
		out.RawString(prefix[1:])
		out.Raw((in.T).MarshalJSON())
	}
	{
		const prefix string = ",\"IP\":"
		out.RawString(prefix)
		out.RawText((in.IP).MarshalText())
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v StdMarshaler) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v StdMarshaler) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *StdMarshaler) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *StdMarshaler) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests7(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests8(in *jlexer.Lexer, out *Slices) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ByteSlice":
			if in.IsNull() {
				in.Skip()
				out.ByteSlice = nil
			} else {
				out.ByteSlice = in.Bytes()
			}
		case "EmptyByteSlice":
			if in.IsNull() {
				in.Skip()
				out.EmptyByteSlice = nil
			} else {
				out.EmptyByteSlice = in.Bytes()
			}
		case "NilByteSlice":
			if in.IsNull() {
				in.Skip()
				out.NilByteSlice = nil
			} else {
				out.NilByteSlice = in.Bytes()
			}
		case "IntSlice":
			if in.IsNull() {
				in.Skip()
				out.IntSlice = nil
			} else {
				in.Delim('[')
				if out.IntSlice == nil {
					if !in.IsDelim(']') {
						out.IntSlice = make([]int, 0, 8)
					} else {
						out.IntSlice = []int{}
					}
				} else {
					out.IntSlice = (out.IntSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v25 int
					v25 = int(in.Int())
					out.IntSlice = append(out.IntSlice, v25)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EmptyIntSlice":
			if in.IsNull() {
				in.Skip()
				out.EmptyIntSlice = nil
			} else {
				in.Delim('[')
				if out.EmptyIntSlice == nil {
					if !in.IsDelim(']') {
						out.EmptyIntSlice = make([]int, 0, 8)
					} else {
						out.EmptyIntSlice = []int{}
					}
				} else {
					out.EmptyIntSlice = (out.EmptyIntSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v26 int
					v26 = int(in.Int())
					out.EmptyIntSlice = append(out.EmptyIntSlice, v26)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NilIntSlice":
			if in.IsNull() {
				in.Skip()
				out.NilIntSlice = nil
			} else {
				in.Delim('[')
				if out.NilIntSlice == nil {
					if !in.IsDelim(']') {
						out.NilIntSlice = make([]int, 0, 8)
					} else {
						out.NilIntSlice = []int{}
					}
				} else {
					out.NilIntSlice = (out.NilIntSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v27 int
					v27 = int(in.Int())
					out.NilIntSlice = append(out.NilIntSlice, v27)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests8(out *jwriter.Writer, in Slices) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ByteSlice\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.ByteSlice)
	}
	{
		const prefix string = ",\"EmptyByteSlice\":"
		out.RawString(prefix)
		out.Base64Bytes(in.EmptyByteSlice)
	}
	{
		const prefix string = ",\"NilByteSlice\":"
		out.RawString(prefix)
		out.Base64Bytes(in.NilByteSlice)
	}
	{
		const prefix string = ",\"IntSlice\":"
		out.RawString(prefix)
		if in.IntSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v34, v35 := range in.IntSlice {
				if v34 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v35))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"EmptyIntSlice\":"
		out.RawString(prefix)
		if in.EmptyIntSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v36, v37 := range in.EmptyIntSlice {
				if v36 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v37))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NilIntSlice\":"
		out.RawString(prefix)
		if in.NilIntSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v38, v39 := range in.NilIntSlice {
				if v38 > 0 {
					out.RawByte(',')
				}
				out.Int(int(v39))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Slices) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Slices) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Slices) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Slices) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests8(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests9(in *jlexer.Lexer, out *RequiredOptionalStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var FirstNameSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "first_name":
			out.FirstName = string(in.String())
			FirstNameSet = true
		case "last_name":
			out.Lastname = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !FirstNameSet {
		in.AddError(fmt.Errorf("key 'first_name' is required"))
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests9(out *jwriter.Writer, in RequiredOptionalStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"first_name\":"
		out.RawString(prefix[1:])
		out.String(string(in.FirstName))
	}
	{
		const prefix string = ",\"last_name\":"
		out.RawString(prefix)
		out.String(string(in.Lastname))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequiredOptionalStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequiredOptionalStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequiredOptionalStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequiredOptionalStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests9(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests10(in *jlexer.Lexer, out *RequiredOptionalMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	var ReqMapSet bool
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "req_map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.ReqMap = make(map[int]string)
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v40 string
					v40 = string(in.String())
					(out.ReqMap)[key] = v40
					in.WantComma()
				}
				in.Delim('}')
			}
			ReqMapSet = true
		case "oe_map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				if !in.IsDelim('}') {
					out.OmitEmptyMap = make(map[int]string)
				} else {
					out.OmitEmptyMap = nil
				}
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v41 string
					v41 = string(in.String())
					(out.OmitEmptyMap)[key] = v41
					in.WantComma()
				}
				in.Delim('}')
			}
		case "noe_map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NoOmitEmptyMap = make(map[int]string)
				for !in.IsDelim('}') {
					key := int(in.IntStr())
					in.WantColon()
					var v42 string
					v42 = string(in.String())
					(out.NoOmitEmptyMap)[key] = v42
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
	if !ReqMapSet {
		in.AddError(fmt.Errorf("key 'req_map' is required"))
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests10(out *jwriter.Writer, in RequiredOptionalMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"req_map\":"
		out.RawString(prefix[1:])
		if in.ReqMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v43First := true
			for v43Name, v43Value := range in.ReqMap {
				if v43First {
					v43First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v43Name))
				out.RawByte(':')
				out.String(string(v43Value))
			}
			out.RawByte('}')
		}
	}
	if len(in.OmitEmptyMap) != 0 {
		const prefix string = ",\"oe_map\":"
		out.RawString(prefix)
		{
			out.RawByte('{')
			v44First := true
			for v44Name, v44Value := range in.OmitEmptyMap {
				if v44First {
					v44First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v44Name))
				out.RawByte(':')
				out.String(string(v44Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"noe_map\":"
		out.RawString(prefix)
		if in.NoOmitEmptyMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v45First := true
			for v45Name, v45Value := range in.NoOmitEmptyMap {
				if v45First {
					v45First = false
				} else {
					out.RawByte(',')
				}
				out.IntStr(int(v45Name))
				out.RawByte(':')
				out.String(string(v45Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v RequiredOptionalMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v RequiredOptionalMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *RequiredOptionalMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *RequiredOptionalMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests10(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests11(in *jlexer.Lexer, out *Raw) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field":
			(out.Field).UnmarshalEasyJSON(in)
		case "Field2":
			out.Field2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests11(out *jwriter.Writer, in Raw) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field\":"
		out.RawString(prefix[1:])
		(in.Field).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Field2\":"
		out.RawString(prefix)
		out.String(string(in.Field2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Raw) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Raw) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Raw) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Raw) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests11(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests12(in *jlexer.Lexer, out *PrimitiveTypes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = string(in.String())
		case "Bool":
			out.Bool = bool(in.Bool())
		case "Int":
			out.Int = int(in.Int())
		case "Int8":
			out.Int8 = int8(in.Int8())
		case "Int16":
			out.Int16 = int16(in.Int16())
		case "Int32":
			out.Int32 = int32(in.Int32())
		case "Int64":
			out.Int64 = int64(in.Int64())
		case "Uint":
			out.Uint = uint(in.Uint())
		case "Uint8":
			out.Uint8 = uint8(in.Uint8())
		case "Uint16":
			out.Uint16 = uint16(in.Uint16())
		case "Uint32":
			out.Uint32 = uint32(in.Uint32())
		case "Uint64":
			out.Uint64 = uint64(in.Uint64())
		case "IntString":
			out.IntString = int(in.IntStr())
		case "Int8String":
			out.Int8String = int8(in.Int8Str())
		case "Int16String":
			out.Int16String = int16(in.Int16Str())
		case "Int32String":
			out.Int32String = int32(in.Int32Str())
		case "Int64String":
			out.Int64String = int64(in.Int64Str())
		case "UintString":
			out.UintString = uint(in.UintStr())
		case "Uint8String":
			out.Uint8String = uint8(in.Uint8Str())
		case "Uint16String":
			out.Uint16String = uint16(in.Uint16Str())
		case "Uint32String":
			out.Uint32String = uint32(in.Uint32Str())
		case "Uint64String":
			out.Uint64String = uint64(in.Uint64Str())
		case "Float32":
			out.Float32 = float32(in.Float32())
		case "Float64":
			out.Float64 = float64(in.Float64())
		case "Float32String":
			out.Float32String = float32(in.Float32Str())
		case "Float64String":
			out.Float64String = float64(in.Float64Str())
		case "Ptr":
			if in.IsNull() {
				in.Skip()
				out.Ptr = nil
			} else {
				if out.Ptr == nil {
					out.Ptr = new(string)
				}
				*out.Ptr = string(in.String())
			}
		case "PtrNil":
			if in.IsNull() {
				in.Skip()
				out.PtrNil = nil
			} else {
				if out.PtrNil == nil {
					out.PtrNil = new(string)
				}
				*out.PtrNil = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests12(out *jwriter.Writer, in PrimitiveTypes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Bool\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bool))
	}
	{
		const prefix string = ",\"Int\":"
		out.RawString(prefix)
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"Int8\":"
		out.RawString(prefix)
		out.Int8(int8(in.Int8))
	}
	{
		const prefix string = ",\"Int16\":"
		out.RawString(prefix)
		out.Int16(int16(in.Int16))
	}
	{
		const prefix string = ",\"Int32\":"
		out.RawString(prefix)
		out.Int32(int32(in.Int32))
	}
	{
		const prefix string = ",\"Int64\":"
		out.RawString(prefix)
		out.Int64(int64(in.Int64))
	}
	{
		const prefix string = ",\"Uint\":"
		out.RawString(prefix)
		out.Uint(uint(in.Uint))
	}
	{
		const prefix string = ",\"Uint8\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Uint8))
	}
	{
		const prefix string = ",\"Uint16\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Uint16))
	}
	{
		const prefix string = ",\"Uint32\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Uint32))
	}
	{
		const prefix string = ",\"Uint64\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Uint64))
	}
	{
		const prefix string = ",\"IntString\":"
		out.RawString(prefix)
		out.IntStr(int(in.IntString))
	}
	{
		const prefix string = ",\"Int8String\":"
		out.RawString(prefix)
		out.Int8Str(int8(in.Int8String))
	}
	{
		const prefix string = ",\"Int16String\":"
		out.RawString(prefix)
		out.Int16Str(int16(in.Int16String))
	}
	{
		const prefix string = ",\"Int32String\":"
		out.RawString(prefix)
		out.Int32Str(int32(in.Int32String))
	}
	{
		const prefix string = ",\"Int64String\":"
		out.RawString(prefix)
		out.Int64Str(int64(in.Int64String))
	}
	{
		const prefix string = ",\"UintString\":"
		out.RawString(prefix)
		out.UintStr(uint(in.UintString))
	}
	{
		const prefix string = ",\"Uint8String\":"
		out.RawString(prefix)
		out.Uint8Str(uint8(in.Uint8String))
	}
	{
		const prefix string = ",\"Uint16String\":"
		out.RawString(prefix)
		out.Uint16Str(uint16(in.Uint16String))
	}
	{
		const prefix string = ",\"Uint32String\":"
		out.RawString(prefix)
		out.Uint32Str(uint32(in.Uint32String))
	}
	{
		const prefix string = ",\"Uint64String\":"
		out.RawString(prefix)
		out.Uint64Str(uint64(in.Uint64String))
	}
	{
		const prefix string = ",\"Float32\":"
		out.RawString(prefix)
		out.Float32(float32(in.Float32))
	}
	{
		const prefix string = ",\"Float64\":"
		out.RawString(prefix)
		out.Float64(float64(in.Float64))
	}
	{
		const prefix string = ",\"Float32String\":"
		out.RawString(prefix)
		out.Float32Str(float32(in.Float32String))
	}
	{
		const prefix string = ",\"Float64String\":"
		out.RawString(prefix)
		out.Float64Str(float64(in.Float64String))
	}
	{
		const prefix string = ",\"Ptr\":"
		out.RawString(prefix)
		if in.Ptr == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Ptr))
		}
	}
	{
		const prefix string = ",\"PtrNil\":"
		out.RawString(prefix)
		if in.PtrNil == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PtrNil))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PrimitiveTypes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PrimitiveTypes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PrimitiveTypes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PrimitiveTypes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests12(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests13(in *jlexer.Lexer, out *Opts) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StrNull":
			(out.StrNull).UnmarshalEasyJSON(in)
		case "StrEmpty":
			(out.StrEmpty).UnmarshalEasyJSON(in)
		case "Str":
			(out.Str).UnmarshalEasyJSON(in)
		case "StrOmitempty":
			(out.StrOmitempty).UnmarshalEasyJSON(in)
		case "IntNull":
			(out.IntNull).UnmarshalEasyJSON(in)
		case "IntZero":
			(out.IntZero).UnmarshalEasyJSON(in)
		case "Int":
			(out.Int).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests13(out *jwriter.Writer, in Opts) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"StrNull\":"
		out.RawString(prefix[1:])
		(in.StrNull).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"StrEmpty\":"
		out.RawString(prefix)
		(in.StrEmpty).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Str\":"
		out.RawString(prefix)
		(in.Str).MarshalEasyJSON(out)
	}
	if (in.StrOmitempty).IsDefined() {
		const prefix string = ",\"StrOmitempty\":"
		out.RawString(prefix)
		(in.StrOmitempty).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"IntNull\":"
		out.RawString(prefix)
		(in.IntNull).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"IntZero\":"
		out.RawString(prefix)
		(in.IntZero).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"Int\":"
		out.RawString(prefix)
		(in.Int).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Opts) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Opts) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Opts) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Opts) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests13(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests14(in *jlexer.Lexer, out *OmitEmpty) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "StrE":
			out.StrE = string(in.String())
		case "StrNE":
			out.StrNE = string(in.String())
		case "PtrE":
			if in.IsNull() {
				in.Skip()
				out.PtrE = nil
			} else {
				if out.PtrE == nil {
					out.PtrE = new(string)
				}
				*out.PtrE = string(in.String())
			}
		case "PtrNE":
			if in.IsNull() {
				in.Skip()
				out.PtrNE = nil
			} else {
				if out.PtrNE == nil {
					out.PtrNE = new(string)
				}
				*out.PtrNE = string(in.String())
			}
		case "intField":
			out.IntNE = int(in.Int())
		case "IntE":
			out.IntE = int(in.Int())
		case "SubE":
			(out.SubE).UnmarshalEasyJSON(in)
		case "SubNE":
			(out.SubNE).UnmarshalEasyJSON(in)
		case "SubPE":
			if in.IsNull() {
				in.Skip()
				out.SubPE = nil
			} else {
				if out.SubPE == nil {
					out.SubPE = new(SubStruct)
				}
				(*out.SubPE).UnmarshalEasyJSON(in)
			}
		case "SubPNE":
			if in.IsNull() {
				in.Skip()
				out.SubPNE = nil
			} else {
				if out.SubPNE == nil {
					out.SubPNE = new(SubStruct)
				}
				(*out.SubPNE).UnmarshalEasyJSON(in)
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests14(out *jwriter.Writer, in OmitEmpty) {
	out.RawByte('{')
	first := true
	_ = first
	if in.StrE != "" {
		const prefix string = ",\"StrE\":"
		first = false
		out.RawString(prefix[1:])
		out.String(string(in.StrE))
	}
	if in.StrNE != "" {
		const prefix string = ",\"StrNE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(in.StrNE))
	}
	if in.PtrE != nil {
		const prefix string = ",\"PtrE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PtrE))
	}
	if in.PtrNE != nil {
		const prefix string = ",\"PtrNE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.String(string(*in.PtrNE))
	}
	if in.IntNE != 0 {
		const prefix string = ",\"intField\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IntNE))
	}
	if in.IntE != 0 {
		const prefix string = ",\"IntE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		out.Int(int(in.IntE))
	}
	if true {
		const prefix string = ",\"SubE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SubE).MarshalEasyJSON(out)
	}
	if true {
		const prefix string = ",\"SubNE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(in.SubNE).MarshalEasyJSON(out)
	}
	if in.SubPE != nil {
		const prefix string = ",\"SubPE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SubPE).MarshalEasyJSON(out)
	}
	if in.SubPNE != nil {
		const prefix string = ",\"SubPNE\":"
		if first {
			first = false
			out.RawString(prefix[1:])
		} else {
			out.RawString(prefix)
		}
		(*in.SubPNE).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v OmitEmpty) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v OmitEmpty) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *OmitEmpty) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *OmitEmpty) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests14(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests15(in *jlexer.Lexer, out *NamedPrimitiveTypes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "String":
			out.String = NamedString(in.String())
		case "Bool":
			out.Bool = NamedBool(in.Bool())
		case "Int":
			out.Int = NamedInt(in.Int())
		case "Int8":
			out.Int8 = NamedInt8(in.Int8())
		case "Int16":
			out.Int16 = NamedInt16(in.Int16())
		case "Int32":
			out.Int32 = NamedInt32(in.Int32())
		case "Int64":
			out.Int64 = NamedInt64(in.Int64())
		case "Uint":
			out.Uint = NamedUint(in.Uint())
		case "Uint8":
			out.Uint8 = NamedUint8(in.Uint8())
		case "Uint16":
			out.Uint16 = NamedUint16(in.Uint16())
		case "Uint32":
			out.Uint32 = NamedUint32(in.Uint32())
		case "Uint64":
			out.Uint64 = NamedUint64(in.Uint64())
		case "Float32":
			out.Float32 = NamedFloat32(in.Float32())
		case "Float64":
			out.Float64 = NamedFloat64(in.Float64())
		case "Ptr":
			if in.IsNull() {
				in.Skip()
				out.Ptr = nil
			} else {
				if out.Ptr == nil {
					out.Ptr = new(string)
				}
				*out.Ptr = string(in.String())
			}
		case "PtrNil":
			if in.IsNull() {
				in.Skip()
				out.PtrNil = nil
			} else {
				if out.PtrNil == nil {
					out.PtrNil = new(string)
				}
				*out.PtrNil = string(in.String())
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests15(out *jwriter.Writer, in NamedPrimitiveTypes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"String\":"
		out.RawString(prefix[1:])
		out.String(string(in.String))
	}
	{
		const prefix string = ",\"Bool\":"
		out.RawString(prefix)
		out.Bool(bool(in.Bool))
	}
	{
		const prefix string = ",\"Int\":"
		out.RawString(prefix)
		out.Int(int(in.Int))
	}
	{
		const prefix string = ",\"Int8\":"
		out.RawString(prefix)
		out.Int8(int8(in.Int8))
	}
	{
		const prefix string = ",\"Int16\":"
		out.RawString(prefix)
		out.Int16(int16(in.Int16))
	}
	{
		const prefix string = ",\"Int32\":"
		out.RawString(prefix)
		out.Int32(int32(in.Int32))
	}
	{
		const prefix string = ",\"Int64\":"
		out.RawString(prefix)
		out.Int64(int64(in.Int64))
	}
	{
		const prefix string = ",\"Uint\":"
		out.RawString(prefix)
		out.Uint(uint(in.Uint))
	}
	{
		const prefix string = ",\"Uint8\":"
		out.RawString(prefix)
		out.Uint8(uint8(in.Uint8))
	}
	{
		const prefix string = ",\"Uint16\":"
		out.RawString(prefix)
		out.Uint16(uint16(in.Uint16))
	}
	{
		const prefix string = ",\"Uint32\":"
		out.RawString(prefix)
		out.Uint32(uint32(in.Uint32))
	}
	{
		const prefix string = ",\"Uint64\":"
		out.RawString(prefix)
		out.Uint64(uint64(in.Uint64))
	}
	{
		const prefix string = ",\"Float32\":"
		out.RawString(prefix)
		out.Float32(float32(in.Float32))
	}
	{
		const prefix string = ",\"Float64\":"
		out.RawString(prefix)
		out.Float64(float64(in.Float64))
	}
	{
		const prefix string = ",\"Ptr\":"
		out.RawString(prefix)
		if in.Ptr == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.Ptr))
		}
	}
	{
		const prefix string = ",\"PtrNil\":"
		out.RawString(prefix)
		if in.PtrNil == nil {
			out.RawString("null")
		} else {
			out.String(string(*in.PtrNil))
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NamedPrimitiveTypes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests15(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NamedPrimitiveTypes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests15(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NamedPrimitiveTypes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests15(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NamedPrimitiveTypes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests15(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests16(in *jlexer.Lexer, out *MyUInt8Slice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(MyUInt8Slice, 0, 64)
			} else {
				*out = MyUInt8Slice{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v46 MyUInt8
			v46 = MyUInt8(in.Uint8())
			*out = append(*out, v46)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests16(out *jwriter.Writer, in MyUInt8Slice) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v47, v48 := range in {
			if v47 > 0 {
				out.RawByte(',')
			}
			out.Uint8(uint8(v48))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MyUInt8Slice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests16(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyUInt8Slice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests16(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyUInt8Slice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests16(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyUInt8Slice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests16(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests17(in *jlexer.Lexer, out *MyUInt8Array) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('[')
		v49 := 0
		for !in.IsDelim(']') {
			if v49 < 2 {
				(*out)[v49] = MyUInt8(in.Uint8())
				v49++
			} else {
				in.SkipRecursive()
			}
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests17(out *jwriter.Writer, in MyUInt8Array) {
	out.RawByte('[')
	for v50 := range in {
		if v50 > 0 {
			out.RawByte(',')
		}
		out.Uint8(uint8((in)[v50]))
	}
	out.RawByte(']')
}

// MarshalJSON supports json.Marshaler interface
func (v MyUInt8Array) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests17(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MyUInt8Array) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests17(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MyUInt8Array) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests17(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MyUInt8Array) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests17(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests18(in *jlexer.Lexer, out *Maps) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Map":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Map = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v51 string
					v51 = string(in.String())
					(out.Map)[key] = v51
					in.WantComma()
				}
				in.Delim('}')
			}
		case "InterfaceMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.InterfaceMap = make(map[string]interface{})
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v52 interface{}
					if m, ok := v52.(easyjson.Unmarshaler); ok {
						m.UnmarshalEasyJSON(in)
					} else if m, ok := v52.(json.Unmarshaler); ok {
						_ = m.UnmarshalJSON(in.Raw())
					} else {
						v52 = in.Interface()
					}
					(out.InterfaceMap)[key] = v52
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NilMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NilMap = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v53 string
					v53 = string(in.String())
					(out.NilMap)[key] = v53
					in.WantComma()
				}
				in.Delim('}')
			}
		case "CustomMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.CustomMap = make(map[Str]Str)
				for !in.IsDelim('}') {
					key := Str(in.String())
					in.WantColon()
					var v54 Str
					v54 = Str(in.String())
					(out.CustomMap)[key] = v54
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests18(out *jwriter.Writer, in Maps) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Map\":"
		out.RawString(prefix[1:])
		if in.Map == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v55First := true
			for v55Name, v55Value := range in.Map {
				if v55First {
					v55First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v55Name))
				out.RawByte(':')
				out.String(string(v55Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"InterfaceMap\":"
		out.RawString(prefix)
		if in.InterfaceMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v56First := true
			for v56Name, v56Value := range in.InterfaceMap {
				if v56First {
					v56First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v56Name))
				out.RawByte(':')
				if m, ok := v56Value.(easyjson.Marshaler); ok {
					m.MarshalEasyJSON(out)
				} else if m, ok := v56Value.(json.Marshaler); ok {
					out.Raw(m.MarshalJSON())
				} else {
					out.Raw(json.Marshal(v56Value))
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NilMap\":"
		out.RawString(prefix)
		if in.NilMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v57First := true
			for v57Name, v57Value := range in.NilMap {
				if v57First {
					v57First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v57Name))
				out.RawByte(':')
				out.String(string(v57Value))
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"CustomMap\":"
		out.RawString(prefix)
		if in.CustomMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v58First := true
			for v58Name, v58Value := range in.CustomMap {
				if v58First {
					v58First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v58Name))
				out.RawByte(':')
				out.String(string(v58Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Maps) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests18(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Maps) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests18(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Maps) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests18(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Maps) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests18(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests19(in *jlexer.Lexer, out *MapUintptrString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapUintptrString)
		for !in.IsDelim('}') {
			key := uintptr(in.UintptrStr())
			in.WantColon()
			var v59 string
			v59 = string(in.String())
			(*out)[key] = v59
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests19(out *jwriter.Writer, in MapUintptrString) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v60First := true
		for v60Name, v60Value := range in {
			if v60First {
				v60First = false
			} else {
				out.RawByte(',')
			}
			out.UintptrStr(uintptr(v60Name))
			out.RawByte(':')
			out.String(string(v60Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapUintptrString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests19(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapUintptrString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests19(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapUintptrString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests19(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapUintptrString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests19(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests20(in *jlexer.Lexer, out *MapUintString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapUintString)
		for !in.IsDelim('}') {
			key := uint(in.UintStr())
			in.WantColon()
			var v61 string
			v61 = string(in.String())
			(*out)[key] = v61
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests20(out *jwriter.Writer, in MapUintString) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v62First := true
		for v62Name, v62Value := range in {
			if v62First {
				v62First = false
			} else {
				out.RawByte(',')
			}
			out.UintStr(uint(v62Name))
			out.RawByte(':')
			out.String(string(v62Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapUintString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests20(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapUintString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests20(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapUintString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests20(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapUintString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests20(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests21(in *jlexer.Lexer, out *MapUint64String) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapUint64String)
		for !in.IsDelim('}') {
			key := uint64(in.Uint64Str())
			in.WantColon()
			var v63 string
			v63 = string(in.String())
			(*out)[key] = v63
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests21(out *jwriter.Writer, in MapUint64String) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v64First := true
		for v64Name, v64Value := range in {
			if v64First {
				v64First = false
			} else {
				out.RawByte(',')
			}
			out.Uint64Str(uint64(v64Name))
			out.RawByte(':')
			out.String(string(v64Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapUint64String) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests21(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapUint64String) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests21(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapUint64String) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests21(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapUint64String) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests21(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests22(in *jlexer.Lexer, out *MapUint32String) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapUint32String)
		for !in.IsDelim('}') {
			key := uint32(in.Uint32Str())
			in.WantColon()
			var v65 string
			v65 = string(in.String())
			(*out)[key] = v65
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests22(out *jwriter.Writer, in MapUint32String) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v66First := true
		for v66Name, v66Value := range in {
			if v66First {
				v66First = false
			} else {
				out.RawByte(',')
			}
			out.Uint32Str(uint32(v66Name))
			out.RawByte(':')
			out.String(string(v66Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapUint32String) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests22(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapUint32String) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests22(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapUint32String) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests22(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapUint32String) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests22(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests23(in *jlexer.Lexer, out *MapStringString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapStringString)
		for !in.IsDelim('}') {
			key := string(in.String())
			in.WantColon()
			var v67 string
			v67 = string(in.String())
			(*out)[key] = v67
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests23(out *jwriter.Writer, in MapStringString) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v68First := true
		for v68Name, v68Value := range in {
			if v68First {
				v68First = false
			} else {
				out.RawByte(',')
			}
			out.String(string(v68Name))
			out.RawByte(':')
			out.String(string(v68Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapStringString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests23(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapStringString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests23(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapStringString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests23(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapStringString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests23(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests24(in *jlexer.Lexer, out *MapMyIntString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapMyIntString)
		for !in.IsDelim('}') {
			key := MyInt(in.IntStr())
			in.WantColon()
			var v69 string
			v69 = string(in.String())
			(*out)[key] = v69
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests24(out *jwriter.Writer, in MapMyIntString) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v70First := true
		for v70Name, v70Value := range in {
			if v70First {
				v70First = false
			} else {
				out.RawByte(',')
			}
			out.IntStr(int(v70Name))
			out.RawByte(':')
			out.String(string(v70Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapMyIntString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests24(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapMyIntString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests24(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapMyIntString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests24(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapMyIntString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests24(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests25(in *jlexer.Lexer, out *MapIntString) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapIntString)
		for !in.IsDelim('}') {
			key := int(in.IntStr())
			in.WantColon()
			var v71 string
			v71 = string(in.String())
			(*out)[key] = v71
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests25(out *jwriter.Writer, in MapIntString) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v72First := true
		for v72Name, v72Value := range in {
			if v72First {
				v72First = false
			} else {
				out.RawByte(',')
			}
			out.IntStr(int(v72Name))
			out.RawByte(':')
			out.String(string(v72Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapIntString) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests25(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapIntString) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests25(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapIntString) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests25(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapIntString) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests25(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests26(in *jlexer.Lexer, out *MapInt64String) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapInt64String)
		for !in.IsDelim('}') {
			key := int64(in.Int64Str())
			in.WantColon()
			var v73 string
			v73 = string(in.String())
			(*out)[key] = v73
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests26(out *jwriter.Writer, in MapInt64String) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v74First := true
		for v74Name, v74Value := range in {
			if v74First {
				v74First = false
			} else {
				out.RawByte(',')
			}
			out.Int64Str(int64(v74Name))
			out.RawByte(':')
			out.String(string(v74Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapInt64String) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests26(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapInt64String) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests26(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapInt64String) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests26(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapInt64String) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests26(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests27(in *jlexer.Lexer, out *MapInt32String) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
	} else {
		in.Delim('{')
		*out = make(MapInt32String)
		for !in.IsDelim('}') {
			key := int32(in.Int32Str())
			in.WantColon()
			var v75 string
			v75 = string(in.String())
			(*out)[key] = v75
			in.WantComma()
		}
		in.Delim('}')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests27(out *jwriter.Writer, in MapInt32String) {
	if in == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
		out.RawString(`null`)
	} else {
		out.RawByte('{')
		v76First := true
		for v76Name, v76Value := range in {
			if v76First {
				v76First = false
			} else {
				out.RawByte(',')
			}
			out.Int32Str(int32(v76Name))
			out.RawByte(':')
			out.String(string(v76Value))
		}
		out.RawByte('}')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v MapInt32String) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests27(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v MapInt32String) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests27(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *MapInt32String) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests27(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *MapInt32String) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests27(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests28(in *jlexer.Lexer, out *Ints) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		in.Skip()
		*out = nil
	} else {
		in.Delim('[')
		if *out == nil {
			if !in.IsDelim(']') {
				*out = make(Ints, 0, 8)
			} else {
				*out = Ints{}
			}
		} else {
			*out = (*out)[:0]
		}
		for !in.IsDelim(']') {
			var v77 int
			v77 = int(in.Int())
			*out = append(*out, v77)
			in.WantComma()
		}
		in.Delim(']')
	}
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests28(out *jwriter.Writer, in Ints) {
	if in == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
		out.RawString("null")
	} else {
		out.RawByte('[')
		for v78, v79 := range in {
			if v78 > 0 {
				out.RawByte(',')
			}
			out.Int(int(v79))
		}
		out.RawByte(']')
	}
}

// MarshalJSON supports json.Marshaler interface
func (v Ints) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests28(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Ints) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests28(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Ints) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests28(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Ints) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests28(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests29(in *jlexer.Lexer, out *IntKeyedMapStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "foo":
			(out.Foo).UnmarshalEasyJSON(in)
		case "bar":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.Bar = make(map[int16]MapUint32String)
				for !in.IsDelim('}') {
					key := int16(in.Int16Str())
					in.WantColon()
					var v80 MapUint32String
					(v80).UnmarshalEasyJSON(in)
					(out.Bar)[key] = v80
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests29(out *jwriter.Writer, in IntKeyedMapStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"foo\":"
		out.RawString(prefix[1:])
		(in.Foo).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"bar\":"
		out.RawString(prefix)
		if in.Bar == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v81First := true
			for v81Name, v81Value := range in.Bar {
				if v81First {
					v81First = false
				} else {
					out.RawByte(',')
				}
				out.Int16Str(int16(v81Name))
				out.RawByte(':')
				(v81Value).MarshalEasyJSON(out)
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IntKeyedMapStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests29(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IntKeyedMapStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests29(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IntKeyedMapStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests29(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IntKeyedMapStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests29(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests30(in *jlexer.Lexer, out *IntArrayStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "pointer":
			if in.IsNull() {
				in.Skip()
				out.Pointer = nil
			} else {
				if out.Pointer == nil {
					out.Pointer = new(IntArray)
				}
				if in.IsNull() {
					in.Skip()
				} else {
					in.Delim('[')
					v82 := 0
					for !in.IsDelim(']') {
						if v82 < 2 {
							(*out.Pointer)[v82] = int(in.Int())
							v82++
						} else {
							in.SkipRecursive()
						}
						in.WantComma()
					}
					in.Delim(']')
				}
			}
		case "value":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v83 := 0
				for !in.IsDelim(']') {
					if v83 < 2 {
						(out.Value)[v83] = int(in.Int())
						v83++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests30(out *jwriter.Writer, in IntArrayStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"pointer\":"
		out.RawString(prefix[1:])
		if in.Pointer == nil {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v84 := range *in.Pointer {
				if v84 > 0 {
					out.RawByte(',')
				}
				out.Int(int((*in.Pointer)[v84]))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"value\":"
		out.RawString(prefix)
		out.RawByte('[')
		for v85 := range in.Value {
			if v85 > 0 {
				out.RawByte(',')
			}
			out.Int(int((in.Value)[v85]))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v IntArrayStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests30(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v IntArrayStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests30(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *IntArrayStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests30(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *IntArrayStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests30(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests31(in *jlexer.Lexer, out *ExcludedField) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "process":
			out.Process = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests31(out *jwriter.Writer, in ExcludedField) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"process\":"
		out.RawString(prefix[1:])
		out.Bool(bool(in.Process))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExcludedField) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests31(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExcludedField) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests31(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExcludedField) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests31(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExcludedField) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests31(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests32(in *jlexer.Lexer, out *EncodingFlagsTestSlice) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "F":
			if in.IsNull() {
				in.Skip()
				out.F = nil
			} else {
				in.Delim('[')
				if out.F == nil {
					if !in.IsDelim(']') {
						out.F = make([]string, 0, 4)
					} else {
						out.F = []string{}
					}
				} else {
					out.F = (out.F)[:0]
				}
				for !in.IsDelim(']') {
					var v86 string
					v86 = string(in.String())
					out.F = append(out.F, v86)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests32(out *jwriter.Writer, in EncodingFlagsTestSlice) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix[1:])
		if in.F == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v87, v88 := range in.F {
				if v87 > 0 {
					out.RawByte(',')
				}
				out.String(string(v88))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EncodingFlagsTestSlice) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests32(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EncodingFlagsTestSlice) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests32(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EncodingFlagsTestSlice) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests32(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EncodingFlagsTestSlice) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests32(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests33(in *jlexer.Lexer, out *EncodingFlagsTestMap) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "F":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.F = make(map[string]string)
				for !in.IsDelim('}') {
					key := string(in.String())
					in.WantColon()
					var v89 string
					v89 = string(in.String())
					(out.F)[key] = v89
					in.WantComma()
				}
				in.Delim('}')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests33(out *jwriter.Writer, in EncodingFlagsTestMap) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"F\":"
		out.RawString(prefix[1:])
		if in.F == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v90First := true
			for v90Name, v90Value := range in.F {
				if v90First {
					v90First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v90Name))
				out.RawByte(':')
				out.String(string(v90Value))
			}
			out.RawByte('}')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EncodingFlagsTestMap) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests33(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EncodingFlagsTestMap) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests33(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EncodingFlagsTestMap) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests33(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EncodingFlagsTestMap) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests33(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests34(in *jlexer.Lexer, out *EmbeddedStruct) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "f1":
			out.Field1 = int(in.Int())
		case "f2":
			out.Field2 = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests34(out *jwriter.Writer, in EmbeddedStruct) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"f1\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Field1))
	}
	{
		const prefix string = ",\"f2\":"
		out.RawString(prefix)
		out.String(string(in.Field2))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbeddedStruct) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests34(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbeddedStruct) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests34(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbeddedStruct) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests34(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbeddedStruct) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests34(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests35(in *jlexer.Lexer, out *DeepNestOptional) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "MapSlice":
			if in.IsNull() {
				in.Skip()
				out.MapSlice = nil
			} else {
				in.Delim('[')
				if out.MapSlice == nil {
					if !in.IsDelim(']') {
						out.MapSlice = make([]map[Str]Str, 0, 8)
					} else {
						out.MapSlice = []map[Str]Str{}
					}
				} else {
					out.MapSlice = (out.MapSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v91 map[Str]Str
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						if !in.IsDelim('}') {
							v91 = make(map[Str]Str)
						} else {
							v91 = nil
						}
						for !in.IsDelim('}') {
							key := Str(in.String())
							in.WantColon()
							var v92 Str
							v92 = Str(in.String())
							(v91)[key] = v92
							in.WantComma()
						}
						in.Delim('}')
					}
					out.MapSlice = append(out.MapSlice, v91)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests35(out *jwriter.Writer, in DeepNestOptional) {
	out.RawByte('{')
	first := true
	_ = first
	if len(in.MapSlice) != 0 {
		const prefix string = ",\"MapSlice\":"
		first = false
		out.RawString(prefix[1:])
		{
			out.RawByte('[')
			for v93, v94 := range in.MapSlice {
				if v93 > 0 {
					out.RawByte(',')
				}
				if v94 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v95First := true
					for v95Name, v95Value := range v94 {
						if v95First {
							v95First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v95Name))
						out.RawByte(':')
						out.String(string(v95Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeepNestOptional) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests35(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeepNestOptional) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests35(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeepNestOptional) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests35(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeepNestOptional) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests35(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests36(in *jlexer.Lexer, out *DeepNest) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "SliceMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SliceMap = make(map[Str][]Str)
				for !in.IsDelim('}') {
					key := Str(in.String())
					in.WantColon()
					var v96 []Str
					if in.IsNull() {
						in.Skip()
						v96 = nil
					} else {
						in.Delim('[')
						if v96 == nil {
							if !in.IsDelim(']') {
								v96 = make([]Str, 0, 4)
							} else {
								v96 = []Str{}
							}
						} else {
							v96 = (v96)[:0]
						}
						for !in.IsDelim(']') {
							var v97 Str
							v97 = Str(in.String())
							v96 = append(v96, v97)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.SliceMap)[key] = v96
					in.WantComma()
				}
				in.Delim('}')
			}
		case "SliceMap1":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SliceMap1 = make(map[Str][]Str)
				for !in.IsDelim('}') {
					key := Str(in.String())
					in.WantColon()
					var v98 []Str
					if in.IsNull() {
						in.Skip()
						v98 = nil
					} else {
						in.Delim('[')
						if v98 == nil {
							if !in.IsDelim(']') {
								v98 = make([]Str, 0, 4)
							} else {
								v98 = []Str{}
							}
						} else {
							v98 = (v98)[:0]
						}
						for !in.IsDelim(']') {
							var v99 Str
							v99 = Str(in.String())
							v98 = append(v98, v99)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.SliceMap1)[key] = v98
					in.WantComma()
				}
				in.Delim('}')
			}
		case "SliceMap2":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.SliceMap2 = make(map[Str][]Str)
				for !in.IsDelim('}') {
					key := Str(in.String())
					in.WantColon()
					var v100 []Str
					if in.IsNull() {
						in.Skip()
						v100 = nil
					} else {
						in.Delim('[')
						if v100 == nil {
							if !in.IsDelim(']') {
								v100 = make([]Str, 0, 4)
							} else {
								v100 = []Str{}
							}
						} else {
							v100 = (v100)[:0]
						}
						for !in.IsDelim(']') {
							var v101 Str
							v101 = Str(in.String())
							v100 = append(v100, v101)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.SliceMap2)[key] = v100
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NamedSliceMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NamedSliceMap = make(map[Str]NamedSlice)
				for !in.IsDelim('}') {
					key := Str(in.String())
					in.WantColon()
					var v102 NamedSlice
					if in.IsNull() {
						in.Skip()
						v102 = nil
					} else {
						in.Delim('[')
						if v102 == nil {
							if !in.IsDelim(']') {
								v102 = make(NamedSlice, 0, 4)
							} else {
								v102 = NamedSlice{}
							}
						} else {
							v102 = (v102)[:0]
						}
						for !in.IsDelim(']') {
							var v103 Str
							v103 = Str(in.String())
							v102 = append(v102, v103)
							in.WantComma()
						}
						in.Delim(']')
					}
					(out.NamedSliceMap)[key] = v102
					in.WantComma()
				}
				in.Delim('}')
			}
		case "NamedMapMap":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('{')
				out.NamedMapMap = make(map[Str]NamedMap)
				for !in.IsDelim('}') {
					key := Str(in.String())
					in.WantColon()
					var v104 NamedMap
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v104 = make(NamedMap)
						for !in.IsDelim('}') {
							key := Str(in.String())
							in.WantColon()
							var v105 Str
							v105 = Str(in.String())
							(v104)[key] = v105
							in.WantComma()
						}
						in.Delim('}')
					}
					(out.NamedMapMap)[key] = v104
					in.WantComma()
				}
				in.Delim('}')
			}
		case "MapSlice":
			if in.IsNull() {
				in.Skip()
				out.MapSlice = nil
			} else {
				in.Delim('[')
				if out.MapSlice == nil {
					if !in.IsDelim(']') {
						out.MapSlice = make([]map[Str]Str, 0, 8)
					} else {
						out.MapSlice = []map[Str]Str{}
					}
				} else {
					out.MapSlice = (out.MapSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v106 map[Str]Str
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v106 = make(map[Str]Str)
						for !in.IsDelim('}') {
							key := Str(in.String())
							in.WantColon()
							var v107 Str
							v107 = Str(in.String())
							(v106)[key] = v107
							in.WantComma()
						}
						in.Delim('}')
					}
					out.MapSlice = append(out.MapSlice, v106)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NamedSliceSlice":
			if in.IsNull() {
				in.Skip()
				out.NamedSliceSlice = nil
			} else {
				in.Delim('[')
				if out.NamedSliceSlice == nil {
					if !in.IsDelim(']') {
						out.NamedSliceSlice = make([]NamedSlice, 0, 2)
					} else {
						out.NamedSliceSlice = []NamedSlice{}
					}
				} else {
					out.NamedSliceSlice = (out.NamedSliceSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v108 NamedSlice
					if in.IsNull() {
						in.Skip()
						v108 = nil
					} else {
						in.Delim('[')
						if v108 == nil {
							if !in.IsDelim(']') {
								v108 = make(NamedSlice, 0, 4)
							} else {
								v108 = NamedSlice{}
							}
						} else {
							v108 = (v108)[:0]
						}
						for !in.IsDelim(']') {
							var v109 Str
							v109 = Str(in.String())
							v108 = append(v108, v109)
							in.WantComma()
						}
						in.Delim(']')
					}
					out.NamedSliceSlice = append(out.NamedSliceSlice, v108)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NamedMapSlice":
			if in.IsNull() {
				in.Skip()
				out.NamedMapSlice = nil
			} else {
				in.Delim('[')
				if out.NamedMapSlice == nil {
					if !in.IsDelim(']') {
						out.NamedMapSlice = make([]NamedMap, 0, 8)
					} else {
						out.NamedMapSlice = []NamedMap{}
					}
				} else {
					out.NamedMapSlice = (out.NamedMapSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v110 NamedMap
					if in.IsNull() {
						in.Skip()
					} else {
						in.Delim('{')
						v110 = make(NamedMap)
						for !in.IsDelim('}') {
							key := Str(in.String())
							in.WantColon()
							var v111 Str
							v111 = Str(in.String())
							(v110)[key] = v111
							in.WantComma()
						}
						in.Delim('}')
					}
					out.NamedMapSlice = append(out.NamedMapSlice, v110)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "NamedStringSlice":
			if in.IsNull() {
				in.Skip()
				out.NamedStringSlice = nil
			} else {
				in.Delim('[')
				if out.NamedStringSlice == nil {
					if !in.IsDelim(']') {
						out.NamedStringSlice = make([]NamedString, 0, 4)
					} else {
						out.NamedStringSlice = []NamedString{}
					}
				} else {
					out.NamedStringSlice = (out.NamedStringSlice)[:0]
				}
				for !in.IsDelim(']') {
					var v112 NamedString
					v112 = NamedString(in.String())
					out.NamedStringSlice = append(out.NamedStringSlice, v112)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests36(out *jwriter.Writer, in DeepNest) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"SliceMap\":"
		out.RawString(prefix[1:])
		if in.SliceMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v113First := true
			for v113Name, v113Value := range in.SliceMap {
				if v113First {
					v113First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v113Name))
				out.RawByte(':')
				if v113Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v114, v115 := range v113Value {
						if v114 > 0 {
							out.RawByte(',')
						}
						out.String(string(v115))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"SliceMap1\":"
		out.RawString(prefix)
		if in.SliceMap1 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v116First := true
			for v116Name, v116Value := range in.SliceMap1 {
				if v116First {
					v116First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v116Name))
				out.RawByte(':')
				if v116Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v117, v118 := range v116Value {
						if v117 > 0 {
							out.RawByte(',')
						}
						out.String(string(v118))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"SliceMap2\":"
		out.RawString(prefix)
		if in.SliceMap2 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v119First := true
			for v119Name, v119Value := range in.SliceMap2 {
				if v119First {
					v119First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v119Name))
				out.RawByte(':')
				if v119Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v120, v121 := range v119Value {
						if v120 > 0 {
							out.RawByte(',')
						}
						out.String(string(v121))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NamedSliceMap\":"
		out.RawString(prefix)
		if in.NamedSliceMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v122First := true
			for v122Name, v122Value := range in.NamedSliceMap {
				if v122First {
					v122First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v122Name))
				out.RawByte(':')
				if v122Value == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v123, v124 := range v122Value {
						if v123 > 0 {
							out.RawByte(',')
						}
						out.String(string(v124))
					}
					out.RawByte(']')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"NamedMapMap\":"
		out.RawString(prefix)
		if in.NamedMapMap == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
			out.RawString(`null`)
		} else {
			out.RawByte('{')
			v125First := true
			for v125Name, v125Value := range in.NamedMapMap {
				if v125First {
					v125First = false
				} else {
					out.RawByte(',')
				}
				out.String(string(v125Name))
				out.RawByte(':')
				if v125Value == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v126First := true
					for v126Name, v126Value := range v125Value {
						if v126First {
							v126First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v126Name))
						out.RawByte(':')
						out.String(string(v126Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte('}')
		}
	}
	{
		const prefix string = ",\"MapSlice\":"
		out.RawString(prefix)
		if in.MapSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v127, v128 := range in.MapSlice {
				if v127 > 0 {
					out.RawByte(',')
				}
				if v128 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v129First := true
					for v129Name, v129Value := range v128 {
						if v129First {
							v129First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v129Name))
						out.RawByte(':')
						out.String(string(v129Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NamedSliceSlice\":"
		out.RawString(prefix)
		if in.NamedSliceSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v130, v131 := range in.NamedSliceSlice {
				if v130 > 0 {
					out.RawByte(',')
				}
				if v131 == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
					out.RawString("null")
				} else {
					out.RawByte('[')
					for v132, v133 := range v131 {
						if v132 > 0 {
							out.RawByte(',')
						}
						out.String(string(v133))
					}
					out.RawByte(']')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NamedMapSlice\":"
		out.RawString(prefix)
		if in.NamedMapSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v134, v135 := range in.NamedMapSlice {
				if v134 > 0 {
					out.RawByte(',')
				}
				if v135 == nil && (out.Flags&jwriter.NilMapAsEmpty) == 0 {
					out.RawString(`null`)
				} else {
					out.RawByte('{')
					v136First := true
					for v136Name, v136Value := range v135 {
						if v136First {
							v136First = false
						} else {
							out.RawByte(',')
						}
						out.String(string(v136Name))
						out.RawByte(':')
						out.String(string(v136Value))
					}
					out.RawByte('}')
				}
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"NamedStringSlice\":"
		out.RawString(prefix)
		if in.NamedStringSlice == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v137, v138 := range in.NamedStringSlice {
				if v137 > 0 {
					out.RawByte(',')
				}
				out.String(string(v138))
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v DeepNest) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests36(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v DeepNest) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests36(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *DeepNest) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests36(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *DeepNest) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests36(l, v)
}
func easyjson794297d0DecodeGithubComMailruEasyjsonTests37(in *jlexer.Lexer, out *Arrays) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "ByteArray":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.ByteArray[:], in.Bytes())
			}
		case "EmptyByteArray":
			if in.IsNull() {
				in.Skip()
			} else {
				copy(out.EmptyByteArray[:], in.Bytes())
			}
		case "IntArray":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v141 := 0
				for !in.IsDelim(']') {
					if v141 < 5 {
						(out.IntArray)[v141] = int(in.Int())
						v141++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		case "EmptyIntArray":
			if in.IsNull() {
				in.Skip()
			} else {
				in.Delim('[')
				v142 := 0
				for !in.IsDelim(']') {
					if v142 < 0 {
						(out.EmptyIntArray)[v142] = int(in.Int())
						v142++
					} else {
						in.SkipRecursive()
					}
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson794297d0EncodeGithubComMailruEasyjsonTests37(out *jwriter.Writer, in Arrays) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"ByteArray\":"
		out.RawString(prefix[1:])
		out.Base64Bytes(in.ByteArray[:])
	}
	{
		const prefix string = ",\"EmptyByteArray\":"
		out.RawString(prefix)
		out.Base64Bytes(in.EmptyByteArray[:])
	}
	{
		const prefix string = ",\"IntArray\":"
		out.RawString(prefix)
		out.RawByte('[')
		for v145 := range in.IntArray {
			if v145 > 0 {
				out.RawByte(',')
			}
			out.Int(int((in.IntArray)[v145]))
		}
		out.RawByte(']')
	}
	{
		const prefix string = ",\"EmptyIntArray\":"
		out.RawString(prefix)
		out.RawByte('[')
		for v146 := range in.EmptyIntArray {
			if v146 > 0 {
				out.RawByte(',')
			}
			out.Int(int((in.EmptyIntArray)[v146]))
		}
		out.RawByte(']')
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Arrays) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson794297d0EncodeGithubComMailruEasyjsonTests37(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Arrays) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson794297d0EncodeGithubComMailruEasyjsonTests37(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Arrays) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson794297d0DecodeGithubComMailruEasyjsonTests37(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Arrays) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson794297d0DecodeGithubComMailruEasyjsonTests37(l, v)
}
