// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package tests

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson8cdd676fDecodeGithubComMailruEasyjsonTests(in *jlexer.Lexer, out *EmbeddedType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Inner":
			easyjson8cdd676fDecode(in, &out.Inner)
		case "Field2":
			out.Field2 = int(in.Int())
		case "named":
			easyjson8cdd676fDecodeGithubComMailruEasyjsonTests1(in, &out.EmbeddedInnerType2)
		case "Field1":
			out.Field1 = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8cdd676fEncodeGithubComMailruEasyjsonTests(out *jwriter.Writer, in EmbeddedType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Inner\":"
		out.RawString(prefix[1:])
		easyjson8cdd676fEncode(out, in.Inner)
	}
	{
		const prefix string = ",\"Field2\":"
		out.RawString(prefix)
		out.Int(int(in.Field2))
	}
	{
		const prefix string = ",\"named\":"
		out.RawString(prefix)
		easyjson8cdd676fEncodeGithubComMailruEasyjsonTests1(out, in.EmbeddedInnerType2)
	}
	{
		const prefix string = ",\"Field1\":"
		out.RawString(prefix)
		out.Int(int(in.Field1))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v EmbeddedType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson8cdd676fEncodeGithubComMailruEasyjsonTests(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v EmbeddedType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson8cdd676fEncodeGithubComMailruEasyjsonTests(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *EmbeddedType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson8cdd676fDecodeGithubComMailruEasyjsonTests(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *EmbeddedType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson8cdd676fDecodeGithubComMailruEasyjsonTests(l, v)
}
func easyjson8cdd676fDecodeGithubComMailruEasyjsonTests1(in *jlexer.Lexer, out *EmbeddedInnerType2) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field3":
			out.Field3 = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8cdd676fEncodeGithubComMailruEasyjsonTests1(out *jwriter.Writer, in EmbeddedInnerType2) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field3\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Field3))
	}
	out.RawByte('}')
}
func easyjson8cdd676fDecode(in *jlexer.Lexer, out *struct{ EmbeddedInnerType }) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "Field1":
			out.Field1 = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson8cdd676fEncode(out *jwriter.Writer, in struct{ EmbeddedInnerType }) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"Field1\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Field1))
	}
	out.RawByte('}')
}
